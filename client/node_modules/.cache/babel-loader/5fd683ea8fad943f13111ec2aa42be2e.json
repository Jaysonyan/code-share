{"ast":null,"code":"import _slicedToArray from \"/Users/Jayson/Desktop/code-share/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Jayson/Desktop/code-share/client/src/components/editor.js\";\nimport React, { useState } from \"react\";\nimport AceEditor from \"react-ace\";\nimport socket from \"../socket/socket\";\nimport CRDT from \"./crdt\";\n\nconst Editor = () => {\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        code = _useState2[0],\n        updateCode = _useState2[1];\n\n  const serverSocket = socket();\n  const crdt = new CRDT();\n\n  const onChange = (newVal, event) => {\n    console.log(event);\n    serverSocket.emitInsert(newVal);\n    event.lines.forEach((line, rowOffset) => {\n      line.split(\"\").forEach((char, colOffset) => {\n        let pos = {\n          row: event.start.row + rowOffset,\n          column: event.start.column + colOffset\n        };\n\n        switch (event.action) {\n          case \"insert\":\n            crdt.sendInsert(char, pos);\n            break;\n\n          case \"delete\":\n            crdt.sendDelete(char, pos);\n            break;\n        }\n      });\n    });\n    console.log(crdt.toText());\n    updateCode(crdt.toText());\n  };\n\n  serverSocket.handleInsert(insertOp => {\n    updateCode(insertOp);\n  });\n  return React.createElement(AceEditor, {\n    mode: \"java\",\n    theme: \"github\",\n    name: \"hello\",\n    value: code,\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  });\n};\n\nexport default Editor;","map":{"version":3,"sources":["/Users/Jayson/Desktop/code-share/client/src/components/editor.js"],"names":["React","useState","AceEditor","socket","CRDT","Editor","code","updateCode","serverSocket","crdt","onChange","newVal","event","console","log","emitInsert","lines","forEach","line","rowOffset","split","char","colOffset","pos","row","start","column","action","sendInsert","sendDelete","toText","handleInsert","insertOp"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,MAAM,GAAG,MAAM;AAAA,oBACQJ,QAAQ,CAAC,EAAD,CADhB;AAAA;AAAA,QACZK,IADY;AAAA,QACNC,UADM;;AAEnB,QAAMC,YAAY,GAAGL,MAAM,EAA3B;AACA,QAAMM,IAAI,GAAG,IAAIL,IAAJ,EAAb;;AAEA,QAAMM,QAAQ,GAAG,CAACC,MAAD,EAASC,KAAT,KAAmB;AAClCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAJ,IAAAA,YAAY,CAACO,UAAb,CAAwBJ,MAAxB;AACAC,IAAAA,KAAK,CAACI,KAAN,CAAYC,OAAZ,CAAoB,CAACC,IAAD,EAAOC,SAAP,KAAqB;AACvCD,MAAAA,IAAI,CAACE,KAAL,CAAW,EAAX,EAAeH,OAAf,CAAuB,CAACI,IAAD,EAAOC,SAAP,KAAqB;AAC1C,YAAIC,GAAG,GAAG;AACRC,UAAAA,GAAG,EAAEZ,KAAK,CAACa,KAAN,CAAYD,GAAZ,GAAkBL,SADf;AAERO,UAAAA,MAAM,EAAEd,KAAK,CAACa,KAAN,CAAYC,MAAZ,GAAqBJ;AAFrB,SAAV;;AAIA,gBAAOV,KAAK,CAACe,MAAb;AACE,eAAK,QAAL;AACElB,YAAAA,IAAI,CAACmB,UAAL,CAAgBP,IAAhB,EAAsBE,GAAtB;AACA;;AACF,eAAK,QAAL;AACEd,YAAAA,IAAI,CAACoB,UAAL,CAAgBR,IAAhB,EAAsBE,GAAtB;AACA;AANJ;AAQD,OAbD;AAcD,KAfD;AAgBAV,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAI,CAACqB,MAAL,EAAZ;AACAvB,IAAAA,UAAU,CAACE,IAAI,CAACqB,MAAL,EAAD,CAAV;AACD,GArBD;;AAuBAtB,EAAAA,YAAY,CAACuB,YAAb,CAA2BC,QAAD,IAAc;AACtCzB,IAAAA,UAAU,CAACyB,QAAD,CAAV;AACD,GAFD;AAIA,SACE,oBAAC,SAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,KAAK,EAAC,QAFR;AAGE,IAAA,IAAI,EAAC,OAHP;AAIE,IAAA,KAAK,EAAE1B,IAJT;AAKE,IAAA,QAAQ,EAAEI,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AASD,CAzCD;;AA2CA,eAAeL,MAAf","sourcesContent":["import React, { useState } from \"react\"\nimport AceEditor from \"react-ace\"\nimport socket from \"../socket/socket\"\nimport CRDT from \"./crdt\"\n\nconst Editor = () => {\n  const [code, updateCode] = useState(\"\")\n  const serverSocket = socket()\n  const crdt = new CRDT()\n\n  const onChange = (newVal, event) => {\n    console.log(event)\n    serverSocket.emitInsert(newVal)\n    event.lines.forEach((line, rowOffset) => {\n      line.split(\"\").forEach((char, colOffset) => {\n        let pos = {\n          row: event.start.row + rowOffset,\n          column: event.start.column + colOffset\n        }\n        switch(event.action) {\n          case \"insert\":\n            crdt.sendInsert(char, pos)\n            break\n          case \"delete\":\n            crdt.sendDelete(char, pos)\n            break\n        }\n      })\n    })\n    console.log(crdt.toText())\n    updateCode(crdt.toText())\n  }\n\n  serverSocket.handleInsert((insertOp) => {\n    updateCode(insertOp)\n  })\n\n  return (\n    <AceEditor\n      mode=\"java\"\n      theme=\"github\"\n      name=\"hello\"\n      value={code}\n      onChange={onChange}\n    />\n  )\n}\n\nexport default Editor\n"]},"metadata":{},"sourceType":"module"}
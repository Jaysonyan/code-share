{"ast":null,"code":"const MAX_INDEX = 10;\n\nclass CRDT {\n  constructor() {\n    this.document = new Document();\n  }\n\n  sendInsert(pos, char) {\n    let newIndex = getIndexFromPos(pos);\n    let newChar = {\n      char: char,\n      relativeIndex: newIndex\n    };\n    this.document.insertChar(newChar); // Emit char\n  }\n\n  sendDelete(pos) {\n    let deletedChar = getChar(pos.row, pos.column);\n    this.document.deleteChar(deleteChar); // Emit char\n  }\n\n  receiveInsert(character) {\n    this.document.insertChar(character);\n  }\n\n  receiveDelete(character) {\n    this.document.deleteChar(character);\n  }\n\n  getIndexFromPos(pos) {\n    let row = pos.row,\n        column = pos.column;\n    let leftIdx = this.document.getLeftChar(pos);\n    let rightIdx = this.document.getLeftChar(pos);\n    let returnIdx = [];\n    let i = 0;\n\n    while (leftIdx[i] && rightIdx[i] && leftIdx[i] === rightIdx[i]) {\n      returnIdx.push(leftIdx[i]);\n      i++;\n    }\n\n    if (!leftChar[i]) {\n      if (rightIdx[i] === 1) {\n        returnIdx.concat([0, MAX_INDEX / 2]);\n      } else {\n        returnIdx.push(rightIdx[i] / 2);\n      }\n    } else if (!rightChar[i]) {\n      returnIdx.push(rightIdx + 1);\n    } else {\n      if (rightChar[i] - leftChar[i] === 1) {\n        returnIdx.concat([leftIdx[i], MAX_INDEX / 2]);\n      } else {\n        returnIdx.push((leftIdx[i] + rightIdx[i]) / 2);\n      }\n    }\n\n    return returnIdx;\n  }\n\n  toText() {\n    return this.document.getString();\n  }\n\n}\n\nexport default CRDT;","map":{"version":3,"sources":["/Users/Jayson/Desktop/code-share/client/src/components/crdt.js"],"names":["MAX_INDEX","CRDT","constructor","document","Document","sendInsert","pos","char","newIndex","getIndexFromPos","newChar","relativeIndex","insertChar","sendDelete","deletedChar","getChar","row","column","deleteChar","receiveInsert","character","receiveDelete","leftIdx","getLeftChar","rightIdx","returnIdx","i","push","leftChar","concat","rightChar","toText","getString"],"mappings":"AAAA,MAAMA,SAAS,GAAG,EAAlB;;AAEA,MAAMC,IAAN,CAAW;AACTC,EAAAA,WAAW,GAAG;AACZ,SAAKC,QAAL,GAAgB,IAAIC,QAAJ,EAAhB;AACD;;AAEDC,EAAAA,UAAU,CAACC,GAAD,EAAMC,IAAN,EAAY;AACpB,QAAIC,QAAQ,GAAGC,eAAe,CAACH,GAAD,CAA9B;AACA,QAAII,OAAO,GAAG;AAAEH,MAAAA,IAAI,EAAEA,IAAR;AAAcI,MAAAA,aAAa,EAAEH;AAA7B,KAAd;AACA,SAAKL,QAAL,CAAcS,UAAd,CAAyBF,OAAzB,EAHoB,CAIpB;AACD;;AAEDG,EAAAA,UAAU,CAACP,GAAD,EAAM;AACd,QAAIQ,WAAW,GAAGC,OAAO,CAACT,GAAG,CAACU,GAAL,EAAUV,GAAG,CAACW,MAAd,CAAzB;AACA,SAAKd,QAAL,CAAce,UAAd,CAAyBA,UAAzB,EAFc,CAGd;AACD;;AAEDC,EAAAA,aAAa,CAACC,SAAD,EAAY;AACvB,SAAKjB,QAAL,CAAcS,UAAd,CAAyBQ,SAAzB;AACD;;AAEDC,EAAAA,aAAa,CAACD,SAAD,EAAY;AACvB,SAAKjB,QAAL,CAAce,UAAd,CAAyBE,SAAzB;AACD;;AAEDX,EAAAA,eAAe,CAACH,GAAD,EAAM;AAAA,QACbU,GADa,GACGV,GADH,CACbU,GADa;AAAA,QACRC,MADQ,GACGX,GADH,CACRW,MADQ;AAGnB,QAAIK,OAAO,GAAG,KAAKnB,QAAL,CAAcoB,WAAd,CAA0BjB,GAA1B,CAAd;AACA,QAAIkB,QAAQ,GAAG,KAAKrB,QAAL,CAAcoB,WAAd,CAA0BjB,GAA1B,CAAf;AACA,QAAImB,SAAS,GAAG,EAAhB;AAEA,QAAIC,CAAC,GAAG,CAAR;;AACA,WAAMJ,OAAO,CAACI,CAAD,CAAP,IAAcF,QAAQ,CAACE,CAAD,CAAtB,IAA6BJ,OAAO,CAACI,CAAD,CAAP,KAAeF,QAAQ,CAACE,CAAD,CAA1D,EAA+D;AAC7DD,MAAAA,SAAS,CAACE,IAAV,CAAeL,OAAO,CAACI,CAAD,CAAtB;AACAA,MAAAA,CAAC;AACF;;AACD,QAAI,CAACE,QAAQ,CAACF,CAAD,CAAb,EAAkB;AAChB,UAAIF,QAAQ,CAACE,CAAD,CAAR,KAAgB,CAApB,EAAuB;AACrBD,QAAAA,SAAS,CAACI,MAAV,CAAiB,CAAC,CAAD,EAAI7B,SAAS,GAAC,CAAd,CAAjB;AACD,OAFD,MAEO;AACLyB,QAAAA,SAAS,CAACE,IAAV,CAAeH,QAAQ,CAACE,CAAD,CAAR,GAAY,CAA3B;AACD;AACF,KAND,MAMO,IAAI,CAACI,SAAS,CAACJ,CAAD,CAAd,EAAmB;AACxBD,MAAAA,SAAS,CAACE,IAAV,CAAeH,QAAQ,GAAC,CAAxB;AACD,KAFM,MAEA;AACL,UAAIM,SAAS,CAACJ,CAAD,CAAT,GAAeE,QAAQ,CAACF,CAAD,CAAvB,KAA+B,CAAnC,EAAsC;AACpCD,QAAAA,SAAS,CAACI,MAAV,CAAiB,CAACP,OAAO,CAACI,CAAD,CAAR,EAAa1B,SAAS,GAAC,CAAvB,CAAjB;AACD,OAFD,MAEO;AACLyB,QAAAA,SAAS,CAACE,IAAV,CAAe,CAACL,OAAO,CAACI,CAAD,CAAP,GAAaF,QAAQ,CAACE,CAAD,CAAtB,IAA2B,CAA1C;AACD;AACF;;AACD,WAAOD,SAAP;AACD;;AAEDM,EAAAA,MAAM,GAAG;AACP,WAAO,KAAK5B,QAAL,CAAc6B,SAAd,EAAP;AACD;;AA1DQ;;AA6DX,eAAe/B,IAAf","sourcesContent":["const MAX_INDEX = 10\n\nclass CRDT {\n  constructor() {\n    this.document = new Document()\n  }\n\n  sendInsert(pos, char) {\n    let newIndex = getIndexFromPos(pos)\n    let newChar = { char: char, relativeIndex: newIndex }\n    this.document.insertChar(newChar)\n    // Emit char\n  }\n\n  sendDelete(pos) {\n    let deletedChar = getChar(pos.row, pos.column)\n    this.document.deleteChar(deleteChar)\n    // Emit char\n  }\n\n  receiveInsert(character) {\n    this.document.insertChar(character)\n  }\n\n  receiveDelete(character) {\n    this.document.deleteChar(character)\n  }\n\n  getIndexFromPos(pos) {\n    let { row, column } = pos\n\n    let leftIdx = this.document.getLeftChar(pos)\n    let rightIdx = this.document.getLeftChar(pos)\n    let returnIdx = []\n\n    let i = 0\n    while(leftIdx[i] && rightIdx[i] && leftIdx[i] === rightIdx[i]) {\n      returnIdx.push(leftIdx[i])\n      i++\n    }\n    if (!leftChar[i]) {\n      if (rightIdx[i] === 1) {\n        returnIdx.concat([0, MAX_INDEX/2])\n      } else {\n        returnIdx.push(rightIdx[i]/2)\n      }\n    } else if (!rightChar[i]) {\n      returnIdx.push(rightIdx+1)\n    } else {\n      if (rightChar[i] - leftChar[i] === 1) {\n        returnIdx.concat([leftIdx[i], MAX_INDEX/2])\n      } else {\n        returnIdx.push((leftIdx[i] + rightIdx[i])/2)\n      }\n    }\n    return returnIdx\n  }\n\n  toText() {\n    return this.document.getString()\n  }\n}\n\nexport default CRDT\n"]},"metadata":{},"sourceType":"module"}